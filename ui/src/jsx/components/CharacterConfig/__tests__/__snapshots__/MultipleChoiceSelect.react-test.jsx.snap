// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component: MultipleChoiceSelect should handle removing a new pick 1`] = `
<CharacterEditorComponent
  add={1}
  description="Pick some"
  label="Example"
  options={
    Array [
      Object {
        "dict": Object {
          "description": "Bar is good",
        },
        "label": "Simple",
        "path": "foo.bar",
        "type": "dict",
      },
      Object {
        "config": Array [
          Object {
            "dict": Object {
              "description": "Foo is okay",
            },
            "path": "bar.foo",
            "type": "dict",
          },
        ],
        "label": "Complex",
        "type": "config",
      },
    ]
  }
  type="multichoice"
>
  <MultipleChoiceSelect
    add={1}
    character={
      Object {
        "bar": Object {
          "foo": Object {
            "description": "Foo is okay",
          },
        },
        "foo": Object {
          "bar": Object {
            "description": "Bar is good",
          },
        },
      }
    }
    description="Pick some"
    getCurrent={[Function]}
    label="Example"
    limit={0}
    onChange={[Function]}
    onSave={[Function]}
    onUpdate={[Function]}
    options={
      Array [
        Object {
          "dict": Object {
            "description": "Bar is good",
          },
          "label": "Simple",
          "path": "foo.bar",
          "type": "dict",
        },
        Object {
          "config": Array [
            Object {
              "dict": Object {
                "description": "Foo is okay",
              },
              "path": "bar.foo",
              "type": "dict",
            },
          ],
          "label": "Complex",
          "type": "config",
        },
      ]
    }
    replace={0}
    type="multichoice"
  >
    <div>
      <TagContainer
        className={null}
        disabled={false}
        items={
          Array [
            Object {
              "code": "Simple",
              "color": "info",
              "disabled": false,
              "label": "Simple",
            },
            Object {
              "code": "Complex",
              "color": "warning",
              "disabled": true,
              "label": "Complex",
            },
          ]
        }
        multiple={false}
        onAdd={[Function]}
        onDelete={[Function]}
        setState={[Function]}
        showSelect={false}
        value={
          Array [
            "Simple",
            "Complex",
          ]
        }
      >
        <BaseTagContainer
          className={null}
        >
          <div
            className="base-tag-container nice-tags-container"
          >
            <TagSelect
              current={
                Array [
                  "Simple",
                  "Complex",
                ]
              }
              items={
                Array [
                  Object {
                    "code": "Simple",
                    "color": "info",
                    "disabled": false,
                    "label": "Simple",
                  },
                  Object {
                    "code": "Complex",
                    "color": "warning",
                    "disabled": true,
                    "label": "Complex",
                  },
                ]
              }
              multiple={false}
              onSelect={[Function]}
            />
            <Tag
              badges={Array []}
              className={null}
              color={null}
              count={1}
              description={null}
              disabled={false}
              key="Simple"
              label="Simple"
              onChange={null}
              onDelete={[Function]}
            >
              <div
                className="nice-tag"
              >
                <TagLabel>
                  <span
                    className="nice-tag-label"
                  >
                    <ToolTip
                      content={null}
                    >
                      Simple
                    </ToolTip>
                  </span>
                </TagLabel>
                <TagButton
                  icon="fa-trash-o"
                  label={null}
                  onClick={[Function]}
                >
                  <button
                    className="nice-tag-btn"
                    onClick={[Function]}
                  >
                    <i
                      className="icon fa-trash-o"
                    />
                  </button>
                </TagButton>
              </div>
            </Tag>
            <Tag
              badges={Array []}
              className={null}
              color={null}
              count={1}
              description={null}
              disabled={true}
              key="Complex"
              label="Complex"
              onChange={null}
              onDelete={[Function]}
            >
              <div
                className="nice-tag muted"
              >
                <TagLabel>
                  <span
                    className="nice-tag-label"
                  >
                    <ToolTip
                      content={null}
                    >
                      Complex
                    </ToolTip>
                  </span>
                </TagLabel>
              </div>
            </Tag>
          </div>
        </BaseTagContainer>
      </TagContainer>
      <CharacterConfig
        config={
          Array [
            Object {
              "dict": Object {
                "description": "Bar is good",
              },
              "label": "Simple",
              "path": "foo.bar",
              "type": "dict",
            },
          ]
        }
        key="0"
      >
        <FormGroup
          key="0"
          label="Simple"
        >
          <div
            className="nice-form-group"
          >
            <label>
              Simple
            </label>
            <CharacterEditorComponent
              dict={
                Object {
                  "description": "Bar is good",
                }
              }
              path="foo.bar"
              type="dict"
            >
              <DictPropertySelect
                current={
                  Object {
                    "description": "Bar is good",
                  }
                }
                dict={
                  Object {
                    "description": "Bar is good",
                  }
                }
                getCurrent={[Function]}
                onChange={[Function]}
                onSave={[Function]}
                onUpdate={[Function]}
                type="dict"
              >
                <MDReactComponent
                  text="Bar is good"
                >
                  <span
                    key="mdrct-html-0"
                  >
                    <p
                      key="mdrct-p-0"
                    >
                      Bar is good
                    </p>
                  </span>
                </MDReactComponent>
              </DictPropertySelect>
            </CharacterEditorComponent>
          </div>
        </FormGroup>
      </CharacterConfig>
      <CharacterConfig
        config={
          Array [
            Object {
              "config": Array [
                Object {
                  "dict": Object {
                    "description": "Foo is okay",
                  },
                  "path": "bar.foo",
                  "type": "dict",
                },
              ],
              "label": "Complex",
              "type": "config",
            },
          ]
        }
        key="1"
      >
        <FormGroup
          key="0"
          label="Complex"
        >
          <div
            className="nice-form-group"
          >
            <label>
              Complex
            </label>
            <CharacterConfig
              config={
                Array [
                  Object {
                    "dict": Object {
                      "description": "Foo is okay",
                    },
                    "path": "bar.foo",
                    "type": "dict",
                  },
                ]
              }
              type="config"
            >
              <FormGroup
                key="0"
              >
                <div
                  className="nice-form-group"
                >
                  <label />
                  <CharacterEditorComponent
                    dict={
                      Object {
                        "description": "Foo is okay",
                      }
                    }
                    path="bar.foo"
                    type="dict"
                  >
                    <DictPropertySelect
                      current={
                        Object {
                          "description": "Foo is okay",
                        }
                      }
                      dict={
                        Object {
                          "description": "Foo is okay",
                        }
                      }
                      getCurrent={[Function]}
                      onChange={[Function]}
                      onSave={[Function]}
                      onUpdate={[Function]}
                      type="dict"
                    >
                      <MDReactComponent
                        text="Foo is okay"
                      >
                        <span
                          key="mdrct-html-0"
                        >
                          <p
                            key="mdrct-p-0"
                          >
                            Foo is okay
                          </p>
                        </span>
                      </MDReactComponent>
                    </DictPropertySelect>
                  </CharacterEditorComponent>
                </div>
              </FormGroup>
            </CharacterConfig>
          </div>
        </FormGroup>
      </CharacterConfig>
    </div>
  </MultipleChoiceSelect>
</CharacterEditorComponent>
`;

exports[`Component: MultipleChoiceSelect should handle removing a new pick 2`] = `
<CharacterEditorComponent
  add={1}
  description="Pick some"
  label="Example"
  options={
    Array [
      Object {
        "dict": Object {
          "description": "Bar is good",
        },
        "label": "Simple",
        "path": "foo.bar",
        "type": "dict",
      },
      Object {
        "config": Array [
          Object {
            "dict": Object {
              "description": "Foo is okay",
            },
            "path": "bar.foo",
            "type": "dict",
          },
        ],
        "label": "Complex",
        "type": "config",
      },
    ]
  }
  type="multichoice"
>
  <MultipleChoiceSelect
    add={1}
    character={
      Object {
        "bar": Object {
          "foo": Object {
            "description": "Foo is okay",
          },
        },
        "foo": Object {
          "bar": Object {
            "description": "Bar is good",
          },
        },
      }
    }
    description="Pick some"
    getCurrent={[Function]}
    label="Example"
    limit={0}
    onChange={[Function]}
    onSave={[Function]}
    onUpdate={[Function]}
    options={
      Array [
        Object {
          "dict": Object {
            "description": "Bar is good",
          },
          "label": "Simple",
          "path": "foo.bar",
          "type": "dict",
        },
        Object {
          "config": Array [
            Object {
              "dict": Object {
                "description": "Foo is okay",
              },
              "path": "bar.foo",
              "type": "dict",
            },
          ],
          "label": "Complex",
          "type": "config",
        },
      ]
    }
    replace={0}
    type="multichoice"
  >
    <div>
      <TagContainer
        className={null}
        disabled={false}
        items={
          Array [
            Object {
              "code": "Simple",
              "color": "warning",
              "disabled": true,
              "label": "Simple",
            },
            Object {
              "code": "Complex",
              "color": "warning",
              "disabled": true,
              "label": "Complex",
            },
          ]
        }
        multiple={false}
        onAdd={[Function]}
        onDelete={[Function]}
        setState={[Function]}
        showSelect={true}
        value={
          Array [
            "Complex",
          ]
        }
      >
        <BaseTagContainer
          className={null}
        >
          <div
            className="base-tag-container nice-tags-container"
          >
            <TagSelect
              current={
                Array [
                  "Complex",
                ]
              }
              items={
                Array [
                  Object {
                    "code": "Simple",
                    "color": "warning",
                    "disabled": true,
                    "label": "Simple",
                  },
                  Object {
                    "code": "Complex",
                    "color": "warning",
                    "disabled": true,
                    "label": "Complex",
                  },
                ]
              }
              multiple={false}
              onSelect={[Function]}
            >
              <SingleSelect
                defaultValue={null}
                emptyLabel="Add..."
                isDisabled={[Function]}
                items={
                  Array [
                    Object {
                      "code": "Simple",
                      "label": "Simple",
                    },
                  ]
                }
                renderEmpty={null}
                selected={null}
                setState={[Function]}
              >
                <OnClickOutside(BaseSelect)
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  excludeScrollbar={false}
                  label="Add..."
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  stopPropagation={false}
                >
                  <BaseSelect
                    className={null}
                    closeOnClick={true}
                    description={null}
                    disableOnClickOutside={[Function]}
                    disabled={false}
                    enableOnClickOutside={[Function]}
                    eventTypes={
                      Array [
                        "mousedown",
                        "touchstart",
                      ]
                    }
                    heading={null}
                    label="Add..."
                    outsideClickIgnoreClass="ignore-react-onclickoutside"
                    preventDefault={false}
                    stopPropagation={false}
                  >
                    <div
                      className="nice-dropdown nice-form-control"
                    >
                      <SelectButton
                        disabled={false}
                        label="Add..."
                        onToggle={[Function]}
                      >
                        <button
                          className="nice-btn"
                          disabled={false}
                          onClick={[Function]}
                        >
                          Add...
                          <i
                            className="icon fa-angle-down"
                          />
                        </button>
                      </SelectButton>
                      <ul
                        className="dropdown-menu"
                        onClick={[Function]}
                      >
                        <SelectItem
                          disabled={false}
                          id="Simple"
                          key="Simple"
                          label="Simple"
                          onClick={[Function]}
                          selected={false}
                        >
                          <li
                            className={null}
                            data-value="Simple"
                            onClick={[Function]}
                          >
                            <a>
                              Simple
                            </a>
                          </li>
                        </SelectItem>
                      </ul>
                    </div>
                  </BaseSelect>
                </OnClickOutside(BaseSelect)>
              </SingleSelect>
            </TagSelect>
            <Tag
              badges={Array []}
              className={null}
              color={null}
              count={1}
              description={null}
              disabled={true}
              key="Complex"
              label="Complex"
              onChange={null}
              onDelete={[Function]}
            >
              <div
                className="nice-tag muted"
              >
                <TagLabel>
                  <span
                    className="nice-tag-label"
                  >
                    <ToolTip
                      content={null}
                    >
                      Complex
                    </ToolTip>
                  </span>
                </TagLabel>
              </div>
            </Tag>
          </div>
        </BaseTagContainer>
      </TagContainer>
      <CharacterConfig
        config={
          Array [
            Object {
              "config": Array [
                Object {
                  "dict": Object {
                    "description": "Foo is okay",
                  },
                  "path": "bar.foo",
                  "type": "dict",
                },
              ],
              "label": "Complex",
              "type": "config",
            },
          ]
        }
        key="1"
      >
        <FormGroup
          key="0"
          label="Complex"
        >
          <div
            className="nice-form-group"
          >
            <label>
              Complex
            </label>
            <CharacterConfig
              config={
                Array [
                  Object {
                    "dict": Object {
                      "description": "Foo is okay",
                    },
                    "path": "bar.foo",
                    "type": "dict",
                  },
                ]
              }
              type="config"
            >
              <FormGroup
                key="0"
              >
                <div
                  className="nice-form-group"
                >
                  <label />
                  <CharacterEditorComponent
                    dict={
                      Object {
                        "description": "Foo is okay",
                      }
                    }
                    path="bar.foo"
                    type="dict"
                  >
                    <DictPropertySelect
                      current={
                        Object {
                          "description": "Foo is okay",
                        }
                      }
                      dict={
                        Object {
                          "description": "Foo is okay",
                        }
                      }
                      getCurrent={[Function]}
                      onChange={[Function]}
                      onSave={[Function]}
                      onUpdate={[Function]}
                      type="dict"
                    >
                      <MDReactComponent
                        text="Foo is okay"
                      >
                        <span
                          key="mdrct-html-0"
                        >
                          <p
                            key="mdrct-p-0"
                          >
                            Foo is okay
                          </p>
                        </span>
                      </MDReactComponent>
                    </DictPropertySelect>
                  </CharacterEditorComponent>
                </div>
              </FormGroup>
            </CharacterConfig>
          </div>
        </FormGroup>
      </CharacterConfig>
    </div>
  </MultipleChoiceSelect>
</CharacterEditorComponent>
`;

exports[`Component: MultipleChoiceSelect should handle replacing one existing 1`] = `
<CharacterEditorComponent
  description="Pick some"
  label="Example"
  options={
    Array [
      Object {
        "dict": Object {
          "description": "Bar is good",
        },
        "label": "Simple",
        "path": "foo.bar",
        "type": "dict",
      },
      Object {
        "config": Array [
          Object {
            "dict": Object {
              "description": "Foo is okay",
            },
            "path": "bar.foo",
            "type": "dict",
          },
        ],
        "label": "Complex",
        "type": "config",
      },
    ]
  }
  replace={1}
  type="multichoice"
>
  <MultipleChoiceSelect
    add={0}
    character={
      Object {
        "bar": Object {
          "foo": Object {
            "description": "Foo is okay",
          },
        },
      }
    }
    description="Pick some"
    getCurrent={[Function]}
    label="Example"
    limit={0}
    onChange={[Function]}
    onSave={[Function]}
    onUpdate={[Function]}
    options={
      Array [
        Object {
          "dict": Object {
            "description": "Bar is good",
          },
          "label": "Simple",
          "path": "foo.bar",
          "type": "dict",
        },
        Object {
          "config": Array [
            Object {
              "dict": Object {
                "description": "Foo is okay",
              },
              "path": "bar.foo",
              "type": "dict",
            },
          ],
          "label": "Complex",
          "type": "config",
        },
      ]
    }
    replace={1}
    type="multichoice"
  >
    <div>
      <TagContainer
        className={null}
        disabled={false}
        items={
          Array [
            Object {
              "code": "Simple",
              "color": "warning",
              "disabled": true,
              "label": "Simple",
            },
            Object {
              "code": "Complex",
              "color": "warning",
              "disabled": true,
              "label": "Complex",
            },
          ]
        }
        multiple={false}
        onAdd={[Function]}
        onDelete={[Function]}
        setState={[Function]}
        showSelect={true}
        value={Array []}
      >
        <BaseTagContainer
          className={null}
        >
          <div
            className="base-tag-container nice-tags-container"
          >
            <TagSelect
              current={Array []}
              items={
                Array [
                  Object {
                    "code": "Simple",
                    "color": "warning",
                    "disabled": true,
                    "label": "Simple",
                  },
                  Object {
                    "code": "Complex",
                    "color": "warning",
                    "disabled": true,
                    "label": "Complex",
                  },
                ]
              }
              multiple={false}
              onSelect={[Function]}
            >
              <SingleSelect
                defaultValue={null}
                emptyLabel="Add..."
                isDisabled={[Function]}
                items={
                  Array [
                    Object {
                      "code": "Simple",
                      "label": "Simple",
                    },
                    Object {
                      "code": "Complex",
                      "label": "Complex",
                    },
                  ]
                }
                renderEmpty={null}
                selected={null}
                setState={[Function]}
              >
                <OnClickOutside(BaseSelect)
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  excludeScrollbar={false}
                  label="Add..."
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  stopPropagation={false}
                >
                  <BaseSelect
                    className={null}
                    closeOnClick={true}
                    description={null}
                    disableOnClickOutside={[Function]}
                    disabled={false}
                    enableOnClickOutside={[Function]}
                    eventTypes={
                      Array [
                        "mousedown",
                        "touchstart",
                      ]
                    }
                    heading={null}
                    label="Add..."
                    outsideClickIgnoreClass="ignore-react-onclickoutside"
                    preventDefault={false}
                    stopPropagation={false}
                  >
                    <div
                      className="nice-dropdown nice-form-control"
                    >
                      <SelectButton
                        disabled={false}
                        label="Add..."
                        onToggle={[Function]}
                      >
                        <button
                          className="nice-btn"
                          disabled={false}
                          onClick={[Function]}
                        >
                          Add...
                          <i
                            className="icon fa-angle-down"
                          />
                        </button>
                      </SelectButton>
                      <ul
                        className="dropdown-menu"
                        onClick={[Function]}
                      >
                        <SelectItem
                          disabled={false}
                          id="Simple"
                          key="Simple"
                          label="Simple"
                          onClick={[Function]}
                          selected={false}
                        >
                          <li
                            className={null}
                            data-value="Simple"
                            onClick={[Function]}
                          >
                            <a>
                              Simple
                            </a>
                          </li>
                        </SelectItem>
                        <SelectItem
                          disabled={false}
                          id="Complex"
                          key="Complex"
                          label="Complex"
                          onClick={[Function]}
                          selected={false}
                        >
                          <li
                            className={null}
                            data-value="Complex"
                            onClick={[Function]}
                          >
                            <a>
                              Complex
                            </a>
                          </li>
                        </SelectItem>
                      </ul>
                    </div>
                  </BaseSelect>
                </OnClickOutside(BaseSelect)>
              </SingleSelect>
            </TagSelect>
          </div>
        </BaseTagContainer>
      </TagContainer>
    </div>
  </MultipleChoiceSelect>
</CharacterEditorComponent>
`;

exports[`Component: MultipleChoiceSelect should render with minimum props 1`] = `
<div>
  <div
    className="base-tag-container nice-tags-container"
  >
    <div
      className="nice-dropdown nice-form-control"
    >
      <button
        className="nice-btn"
        disabled={false}
        onClick={[Function]}
      >
        Add...
        <i
          className="icon fa-angle-down"
        />
      </button>
      <ul
        className="dropdown-menu"
        onClick={[Function]}
      >
        <li
          className={null}
          data-value="Simple"
          onClick={[Function]}
        >
          <a>
            Simple
          </a>
        </li>
      </ul>
    </div>
    <div
      className="nice-tag muted"
    >
      <span
        className="nice-tag-label"
      >
        Complex
      </span>
    </div>
  </div>
  <div
    className="nice-form-group"
  >
    <label>
      Complex
    </label>
    <div
      className="nice-form-group"
    >
      <label />
      <span>
        <p>
          Foo is okay
        </p>
      </span>
    </div>
  </div>
</div>
`;
