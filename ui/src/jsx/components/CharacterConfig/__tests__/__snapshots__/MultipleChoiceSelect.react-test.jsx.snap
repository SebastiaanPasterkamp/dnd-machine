// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component: MultipleChoiceSelect should handle removing a new pick 1`] = `
<MultipleChoiceSelect
  add={1}
  added={
    Array [
      "mocked-uuid-2",
    ]
  }
  description="Pick some"
  filtered={Array []}
  getCurrent={[Function]}
  label="Example"
  limit={0}
  options={
    Array [
      Object {
        "dict": Object {
          "description": "Bar is good",
        },
        "label": "Simple",
        "path": "foo.bar",
        "type": "dict",
        "uuid": "mocked-uuid-2",
      },
      Object {
        "config": Array [
          Object {
            "dict": Object {
              "description": "Foo is okay",
            },
            "path": "bar.foo",
            "type": "dict",
            "uuid": "mocked-uuid-4",
          },
        ],
        "label": "Complex",
        "type": "config",
        "uuid": "mocked-uuid-3",
      },
    ]
  }
  removed={Array []}
  replace={0}
  setState={[Function]}
  type="multichoice"
  uuid="mocked-uuid-1"
>
  <div>
    <TagContainer
      className={null}
      disabled={false}
      items={
        Array [
          Object {
            "color": "info",
            "disabled": false,
            "id": "mocked-uuid-2",
            "label": "Simple",
          },
          Object {
            "color": "warning",
            "disabled": true,
            "id": "mocked-uuid-3",
            "label": "Complex",
          },
        ]
      }
      multiple={false}
      onAdd={[Function]}
      onDelete={[Function]}
      setState={[Function]}
      showSelect={false}
      value={
        Array [
          "mocked-uuid-2",
          "mocked-uuid-3",
        ]
      }
    >
      <BaseTagContainer
        className={null}
      >
        <div
          className="base-tag-container nice-tags-container"
        >
          <TagSelect
            current={
              Array [
                "mocked-uuid-2",
                "mocked-uuid-3",
              ]
            }
            items={
              Array [
                Object {
                  "color": "info",
                  "disabled": false,
                  "id": "mocked-uuid-2",
                  "label": "Simple",
                },
                Object {
                  "color": "warning",
                  "disabled": true,
                  "id": "mocked-uuid-3",
                  "label": "Complex",
                },
              ]
            }
            multiple={false}
            onSelect={[Function]}
          />
          <Tag
            badges={Array []}
            className={null}
            color={null}
            count={1}
            description={null}
            disabled={false}
            key="mocked-uuid-2"
            label="Simple"
            onChange={null}
            onDelete={[Function]}
          >
            <div
              className="nice-tag"
            >
              <TagLabel>
                <span
                  className="nice-tag-label"
                >
                  <ToolTip
                    content={null}
                  >
                    Simple
                  </ToolTip>
                </span>
              </TagLabel>
              <TagButton
                icon="fa-trash-o"
                label={null}
                onClick={[Function]}
              >
                <button
                  className="nice-tag-btn"
                  onClick={[Function]}
                >
                  <i
                    className="icon fa-trash-o"
                  />
                </button>
              </TagButton>
            </div>
          </Tag>
          <Tag
            badges={Array []}
            className={null}
            color={null}
            count={1}
            description={null}
            disabled={true}
            key="mocked-uuid-3"
            label="Complex"
            onChange={null}
            onDelete={[Function]}
          >
            <div
              className="nice-tag muted"
            >
              <TagLabel>
                <span
                  className="nice-tag-label"
                >
                  <ToolTip
                    content={null}
                  >
                    Complex
                  </ToolTip>
                </span>
              </TagLabel>
            </div>
          </Tag>
        </div>
      </BaseTagContainer>
    </TagContainer>
    <CharacterConfig
      config={
        Array [
          Object {
            "dict": Object {
              "description": "Bar is good",
            },
            "label": "Simple",
            "path": "foo.bar",
            "type": "dict",
            "uuid": "mocked-uuid-2",
          },
        ]
      }
      key="mocked-uuid-2"
    >
      <FormGroup
        key="0"
        label="Simple"
      >
        <div
          className="nice-form-group"
        >
          <label>
            Simple
          </label>
          <CharacterEditorComponent
            dict={
              Object {
                "description": "Bar is good",
              }
            }
            path="foo.bar"
            type="dict"
            uuid="mocked-uuid-2"
          >
            <DictPropertySelect
              dict={
                Object {
                  "description": "Bar is good",
                }
              }
              getCurrent={[Function]}
              onChange={[Function]}
              onSave={[Function]}
              onUpdate={[Function]}
              setState={[Function]}
              type="dict"
              uuid="mocked-uuid-2"
            >
              <MDReactComponent
                text="Bar is good"
              >
                <span
                  key="mdrct-html-0"
                >
                  <p
                    key="mdrct-p-0"
                  >
                    Bar is good
                  </p>
                </span>
              </MDReactComponent>
            </DictPropertySelect>
          </CharacterEditorComponent>
        </div>
      </FormGroup>
    </CharacterConfig>
    <CharacterConfig
      config={
        Array [
          Object {
            "config": Array [
              Object {
                "dict": Object {
                  "description": "Foo is okay",
                },
                "path": "bar.foo",
                "type": "dict",
                "uuid": "mocked-uuid-4",
              },
            ],
            "label": "Complex",
            "type": "config",
            "uuid": "mocked-uuid-3",
          },
        ]
      }
      key="mocked-uuid-3"
    >
      <FormGroup
        key="0"
        label="Complex"
      >
        <div
          className="nice-form-group"
        >
          <label>
            Complex
          </label>
          <CharacterConfig
            config={
              Array [
                Object {
                  "dict": Object {
                    "description": "Foo is okay",
                  },
                  "path": "bar.foo",
                  "type": "dict",
                  "uuid": "mocked-uuid-4",
                },
              ]
            }
            type="config"
            uuid="mocked-uuid-3"
          >
            <FormGroup
              key="0"
            >
              <div
                className="nice-form-group"
              >
                <label />
                <CharacterEditorComponent
                  dict={
                    Object {
                      "description": "Foo is okay",
                    }
                  }
                  path="bar.foo"
                  type="dict"
                  uuid="mocked-uuid-4"
                >
                  <DictPropertySelect
                    current={
                      Object {
                        "description": "Foo is okay",
                      }
                    }
                    dict={
                      Object {
                        "description": "Foo is okay",
                      }
                    }
                    getCurrent={[Function]}
                    onChange={[Function]}
                    onSave={[Function]}
                    onUpdate={[Function]}
                    setState={[Function]}
                    type="dict"
                    uuid="mocked-uuid-4"
                  >
                    <MDReactComponent
                      text="Foo is okay"
                    >
                      <span
                        key="mdrct-html-0"
                      >
                        <p
                          key="mdrct-p-0"
                        >
                          Foo is okay
                        </p>
                      </span>
                    </MDReactComponent>
                  </DictPropertySelect>
                </CharacterEditorComponent>
              </div>
            </FormGroup>
          </CharacterConfig>
        </div>
      </FormGroup>
    </CharacterConfig>
  </div>
</MultipleChoiceSelect>
`;

exports[`Component: MultipleChoiceSelect should handle removing a new pick 2`] = `
<MultipleChoiceSelect
  add={1}
  added={Array []}
  description="Pick some"
  filtered={
    Array [
      "mocked-uuid-2",
    ]
  }
  getCurrent={[Function]}
  label="Example"
  limit={0}
  options={
    Array [
      Object {
        "dict": Object {
          "description": "Bar is good",
        },
        "label": "Simple",
        "path": "foo.bar",
        "type": "dict",
        "uuid": "mocked-uuid-2",
      },
      Object {
        "config": Array [
          Object {
            "dict": Object {
              "description": "Foo is okay",
            },
            "path": "bar.foo",
            "type": "dict",
            "uuid": "mocked-uuid-4",
          },
        ],
        "label": "Complex",
        "type": "config",
        "uuid": "mocked-uuid-3",
      },
    ]
  }
  removed={Array []}
  replace={0}
  setState={[Function]}
  type="multichoice"
  uuid="mocked-uuid-1"
>
  <div>
    <TagContainer
      className={null}
      disabled={false}
      items={
        Array [
          Object {
            "color": "warning",
            "disabled": true,
            "id": "mocked-uuid-2",
            "label": "Simple",
          },
          Object {
            "color": "warning",
            "disabled": true,
            "id": "mocked-uuid-3",
            "label": "Complex",
          },
        ]
      }
      multiple={false}
      onAdd={[Function]}
      onDelete={[Function]}
      setState={[Function]}
      showSelect={true}
      value={
        Array [
          "mocked-uuid-3",
        ]
      }
    >
      <BaseTagContainer
        className={null}
      >
        <div
          className="base-tag-container nice-tags-container"
        >
          <TagSelect
            current={
              Array [
                "mocked-uuid-3",
              ]
            }
            items={
              Array [
                Object {
                  "color": "warning",
                  "disabled": true,
                  "id": "mocked-uuid-2",
                  "label": "Simple",
                },
                Object {
                  "color": "warning",
                  "disabled": true,
                  "id": "mocked-uuid-3",
                  "label": "Complex",
                },
              ]
            }
            multiple={false}
            onSelect={[Function]}
          >
            <SingleSelect
              defaultValue={null}
              emptyLabel="Add..."
              isDisabled={[Function]}
              items={
                Array [
                  Object {
                    "code": "mocked-uuid-2",
                    "label": "Simple",
                  },
                ]
              }
              renderEmpty={null}
              selected={null}
              setState={[Function]}
            >
              <OnClickOutside(BaseSelect)
                eventTypes={
                  Array [
                    "mousedown",
                    "touchstart",
                  ]
                }
                excludeScrollbar={false}
                label="Add..."
                outsideClickIgnoreClass="ignore-react-onclickoutside"
                preventDefault={false}
                stopPropagation={false}
              >
                <BaseSelect
                  className={null}
                  closeOnClick={true}
                  description={null}
                  disableOnClickOutside={[Function]}
                  disabled={false}
                  enableOnClickOutside={[Function]}
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  heading={null}
                  label="Add..."
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  stopPropagation={false}
                >
                  <div
                    className="nice-dropdown nice-form-control"
                  >
                    <SelectButton
                      disabled={false}
                      label="Add..."
                      onToggle={[Function]}
                    >
                      <button
                        className="nice-btn"
                        disabled={false}
                        onClick={[Function]}
                      >
                        Add...
                        <i
                          className="icon fa-angle-down"
                        />
                      </button>
                    </SelectButton>
                    <ul
                      className="dropdown-menu"
                      onClick={[Function]}
                    >
                      <SelectItem
                        disabled={false}
                        id="mocked-uuid-2"
                        key="mocked-uuid-2"
                        label="Simple"
                        onClick={[Function]}
                        selected={false}
                      >
                        <li
                          className={null}
                          data-value="mocked-uuid-2"
                          onClick={[Function]}
                        >
                          <a>
                            Simple
                          </a>
                        </li>
                      </SelectItem>
                    </ul>
                  </div>
                </BaseSelect>
              </OnClickOutside(BaseSelect)>
            </SingleSelect>
          </TagSelect>
          <Tag
            badges={Array []}
            className={null}
            color={null}
            count={1}
            description={null}
            disabled={true}
            key="mocked-uuid-3"
            label="Complex"
            onChange={null}
            onDelete={[Function]}
          >
            <div
              className="nice-tag muted"
            >
              <TagLabel>
                <span
                  className="nice-tag-label"
                >
                  <ToolTip
                    content={null}
                  >
                    Complex
                  </ToolTip>
                </span>
              </TagLabel>
            </div>
          </Tag>
        </div>
      </BaseTagContainer>
    </TagContainer>
    <CharacterConfig
      config={
        Array [
          Object {
            "config": Array [
              Object {
                "dict": Object {
                  "description": "Foo is okay",
                },
                "path": "bar.foo",
                "type": "dict",
                "uuid": "mocked-uuid-4",
              },
            ],
            "label": "Complex",
            "type": "config",
            "uuid": "mocked-uuid-3",
          },
        ]
      }
      key="mocked-uuid-3"
    >
      <FormGroup
        key="0"
        label="Complex"
      >
        <div
          className="nice-form-group"
        >
          <label>
            Complex
          </label>
          <CharacterConfig
            config={
              Array [
                Object {
                  "dict": Object {
                    "description": "Foo is okay",
                  },
                  "path": "bar.foo",
                  "type": "dict",
                  "uuid": "mocked-uuid-4",
                },
              ]
            }
            type="config"
            uuid="mocked-uuid-3"
          >
            <FormGroup
              key="0"
            >
              <div
                className="nice-form-group"
              >
                <label />
                <CharacterEditorComponent
                  dict={
                    Object {
                      "description": "Foo is okay",
                    }
                  }
                  path="bar.foo"
                  type="dict"
                  uuid="mocked-uuid-4"
                >
                  <DictPropertySelect
                    current={
                      Object {
                        "description": "Foo is okay",
                      }
                    }
                    dict={
                      Object {
                        "description": "Foo is okay",
                      }
                    }
                    getCurrent={[Function]}
                    onChange={[Function]}
                    onSave={[Function]}
                    onUpdate={[Function]}
                    setState={[Function]}
                    type="dict"
                    uuid="mocked-uuid-4"
                  >
                    <MDReactComponent
                      text="Foo is okay"
                    >
                      <span
                        key="mdrct-html-0"
                      >
                        <p
                          key="mdrct-p-0"
                        >
                          Foo is okay
                        </p>
                      </span>
                    </MDReactComponent>
                  </DictPropertySelect>
                </CharacterEditorComponent>
              </div>
            </FormGroup>
          </CharacterConfig>
        </div>
      </FormGroup>
    </CharacterConfig>
  </div>
</MultipleChoiceSelect>
`;

exports[`Component: MultipleChoiceSelect should handle replacing one existing 1`] = `
<MultipleChoiceSelect
  add={0}
  added={Array []}
  description="Pick some"
  filtered={Array []}
  getCurrent={[Function]}
  label="Example"
  limit={0}
  options={
    Array [
      Object {
        "dict": Object {
          "description": "Bar is good",
        },
        "label": "Simple",
        "path": "foo.bar",
        "type": "dict",
        "uuid": "mocked-uuid-2",
      },
      Object {
        "config": Array [
          Object {
            "dict": Object {
              "description": "Foo is okay",
            },
            "path": "bar.foo",
            "type": "dict",
            "uuid": "mocked-uuid-4",
          },
        ],
        "label": "Complex",
        "type": "config",
        "uuid": "mocked-uuid-3",
      },
    ]
  }
  removed={
    Array [
      "mocked-uuid-3",
    ]
  }
  replace={1}
  setState={[Function]}
  type="multichoice"
  uuid="mocked-uuid-1"
>
  <div>
    <TagContainer
      className={null}
      disabled={false}
      items={
        Array [
          Object {
            "color": "warning",
            "disabled": true,
            "id": "mocked-uuid-2",
            "label": "Simple",
          },
          Object {
            "color": "warning",
            "disabled": true,
            "id": "mocked-uuid-3",
            "label": "Complex",
          },
        ]
      }
      multiple={false}
      onAdd={[Function]}
      onDelete={[Function]}
      setState={[Function]}
      showSelect={true}
      value={Array []}
    >
      <BaseTagContainer
        className={null}
      >
        <div
          className="base-tag-container nice-tags-container"
        >
          <TagSelect
            current={Array []}
            items={
              Array [
                Object {
                  "color": "warning",
                  "disabled": true,
                  "id": "mocked-uuid-2",
                  "label": "Simple",
                },
                Object {
                  "color": "warning",
                  "disabled": true,
                  "id": "mocked-uuid-3",
                  "label": "Complex",
                },
              ]
            }
            multiple={false}
            onSelect={[Function]}
          >
            <SingleSelect
              defaultValue={null}
              emptyLabel="Add..."
              isDisabled={[Function]}
              items={
                Array [
                  Object {
                    "code": "mocked-uuid-2",
                    "label": "Simple",
                  },
                  Object {
                    "code": "mocked-uuid-3",
                    "label": "Complex",
                  },
                ]
              }
              renderEmpty={null}
              selected={null}
              setState={[Function]}
            >
              <OnClickOutside(BaseSelect)
                eventTypes={
                  Array [
                    "mousedown",
                    "touchstart",
                  ]
                }
                excludeScrollbar={false}
                label="Add..."
                outsideClickIgnoreClass="ignore-react-onclickoutside"
                preventDefault={false}
                stopPropagation={false}
              >
                <BaseSelect
                  className={null}
                  closeOnClick={true}
                  description={null}
                  disableOnClickOutside={[Function]}
                  disabled={false}
                  enableOnClickOutside={[Function]}
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  heading={null}
                  label="Add..."
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  stopPropagation={false}
                >
                  <div
                    className="nice-dropdown nice-form-control"
                  >
                    <SelectButton
                      disabled={false}
                      label="Add..."
                      onToggle={[Function]}
                    >
                      <button
                        className="nice-btn"
                        disabled={false}
                        onClick={[Function]}
                      >
                        Add...
                        <i
                          className="icon fa-angle-down"
                        />
                      </button>
                    </SelectButton>
                    <ul
                      className="dropdown-menu"
                      onClick={[Function]}
                    >
                      <SelectItem
                        disabled={false}
                        id="mocked-uuid-2"
                        key="mocked-uuid-2"
                        label="Simple"
                        onClick={[Function]}
                        selected={false}
                      >
                        <li
                          className={null}
                          data-value="mocked-uuid-2"
                          onClick={[Function]}
                        >
                          <a>
                            Simple
                          </a>
                        </li>
                      </SelectItem>
                      <SelectItem
                        disabled={false}
                        id="mocked-uuid-3"
                        key="mocked-uuid-3"
                        label="Complex"
                        onClick={[Function]}
                        selected={false}
                      >
                        <li
                          className={null}
                          data-value="mocked-uuid-3"
                          onClick={[Function]}
                        >
                          <a>
                            Complex
                          </a>
                        </li>
                      </SelectItem>
                    </ul>
                  </div>
                </BaseSelect>
              </OnClickOutside(BaseSelect)>
            </SingleSelect>
          </TagSelect>
        </div>
      </BaseTagContainer>
    </TagContainer>
  </div>
</MultipleChoiceSelect>
`;

exports[`Component: MultipleChoiceSelect should render with full props 1`] = `
<div>
  <div
    className="base-tag-container nice-tags-container"
  >
    <div
      className="nice-dropdown nice-form-control"
    >
      <button
        className="nice-btn"
        disabled={false}
        onClick={[Function]}
      >
        Add...
        <i
          className="icon fa-angle-down"
        />
      </button>
      <ul
        className="dropdown-menu"
        onClick={[Function]}
      >
        <li
          className={null}
          data-value="mocked-uuid-2"
          onClick={[Function]}
        >
          <a>
            Simple
          </a>
        </li>
      </ul>
    </div>
    <div
      className="nice-tag"
    >
      <span
        className="nice-tag-label"
      >
        Complex
      </span>
      <button
        className="nice-tag-btn"
        onClick={[Function]}
      >
        <i
          className="icon fa-trash-o"
        />
      </button>
    </div>
  </div>
  <div
    className="nice-form-group"
  >
    <label>
      Complex
    </label>
    <div
      className="nice-form-group"
    >
      <label />
      <span>
        <p>
          Foo is bad
        </p>
      </span>
    </div>
  </div>
</div>
`;

exports[`Component: MultipleChoiceSelect should render with minimum props 1`] = `
<div>
  <div
    className="base-tag-container nice-tags-container"
  />
</div>
`;
