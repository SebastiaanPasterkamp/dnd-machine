// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component: CharacterConfig should not render anything 1`] = `
<CharacterConfig
  config={Array []}
/>
`;

exports[`Component: CharacterConfig should render choice 1`] = `
<CharacterConfig
  config={
    Array [
      Object {
        "options": Array [
          Object {
            "config": Array [
              Object {
                "path": "foo.value",
                "type": "value",
                "uuid": "mocked-uuid-1",
                "value": "bar",
              },
            ],
            "description": "foo",
            "label": "a",
            "type": "config",
            "uuid": "mocked-uuid-9",
          },
          Object {
            "config": Array [
              Object {
                "dict": Object {
                  "bar": "blah",
                  "description": "foo %(bar)s",
                },
                "path": "foo.dict",
                "type": "dict",
                "uuid": "mocked-uuid-2",
              },
            ],
            "label": "b",
            "type": "config",
            "uuid": "mocked-uuid-10",
          },
        ],
        "type": "choice",
        "uuid": "mocked-uuid-8",
      },
    ]
  }
>
  <FormGroup
    key="0"
  >
    <div
      className="nice-form-group"
    >
      <label />
      <CharacterEditorComponent
        options={
          Array [
            Object {
              "config": Array [
                Object {
                  "path": "foo.value",
                  "type": "value",
                  "uuid": "mocked-uuid-1",
                  "value": "bar",
                },
              ],
              "description": "foo",
              "label": "a",
              "type": "config",
              "uuid": "mocked-uuid-9",
            },
            Object {
              "config": Array [
                Object {
                  "dict": Object {
                    "bar": "blah",
                    "description": "foo %(bar)s",
                  },
                  "path": "foo.dict",
                  "type": "dict",
                  "uuid": "mocked-uuid-2",
                },
              ],
              "label": "b",
              "type": "config",
              "uuid": "mocked-uuid-10",
            },
          ]
        }
        type="choice"
        uuid="mocked-uuid-8"
      >
        <ChoiceSelect
          getCurrent={[Function]}
          onChange={[Function]}
          onSave={[Function]}
          onUpdate={[Function]}
          options={
            Array [
              Object {
                "config": Array [
                  Object {
                    "path": "foo.value",
                    "type": "value",
                    "uuid": "mocked-uuid-1",
                    "value": "bar",
                  },
                ],
                "description": "foo",
                "label": "a",
                "type": "config",
                "uuid": "mocked-uuid-9",
              },
              Object {
                "config": Array [
                  Object {
                    "dict": Object {
                      "bar": "blah",
                      "description": "foo %(bar)s",
                    },
                    "path": "foo.dict",
                    "type": "dict",
                    "uuid": "mocked-uuid-2",
                  },
                ],
                "label": "b",
                "type": "config",
                "uuid": "mocked-uuid-10",
              },
            ]
          }
          selected={null}
          setState={[Function]}
          type="choice"
          uuid="mocked-uuid-8"
        >
          <TabComponent
            activeTab={0}
            onTabChange={[Function]}
            tabConfig={
              Array [
                Object {
                  "config": Array [
                    Object {
                      "path": "foo.value",
                      "type": "value",
                      "uuid": "mocked-uuid-1",
                      "value": "bar",
                    },
                  ],
                  "description": "foo",
                  "label": "a",
                  "type": "config",
                  "uuid": "mocked-uuid-9",
                },
                Object {
                  "config": Array [
                    Object {
                      "dict": Object {
                        "bar": "blah",
                        "description": "foo %(bar)s",
                      },
                      "path": "foo.dict",
                      "type": "dict",
                      "uuid": "mocked-uuid-2",
                    },
                  ],
                  "label": "b",
                  "type": "config",
                  "uuid": "mocked-uuid-10",
                },
              ]
            }
          >
            <div
              className="nice-tabs-wrapper tab-component"
            >
              <ul
                className="nice-tabs bold"
              >
                <Tab
                  active={true}
                  color={null}
                  config={
                    Array [
                      Object {
                        "path": "foo.value",
                        "type": "value",
                        "uuid": "mocked-uuid-1",
                        "value": "bar",
                      },
                    ]
                  }
                  description="foo"
                  disabled={false}
                  icon={null}
                  key="tab-0/.$0"
                  label="a"
                  onSelect={[Function]}
                  type="config"
                  uuid="mocked-uuid-9"
                >
                  <li
                    className="tab-component__tab current"
                  >
                    <a
                      className="cursor-pointer"
                      onClick={null}
                    >
                      a
                    </a>
                  </li>
                </Tab>
                <Tab
                  active={false}
                  color={null}
                  config={
                    Array [
                      Object {
                        "dict": Object {
                          "bar": "blah",
                          "description": "foo %(bar)s",
                        },
                        "path": "foo.dict",
                        "type": "dict",
                        "uuid": "mocked-uuid-2",
                      },
                    ]
                  }
                  disabled={false}
                  icon={null}
                  key="tab-1/.$1"
                  label="b"
                  onSelect={[Function]}
                  type="config"
                  uuid="mocked-uuid-10"
                >
                  <li
                    className="tab-component__tab"
                  >
                    <a
                      className="cursor-pointer"
                      onClick={[Function]}
                    >
                      b
                    </a>
                  </li>
                </Tab>
              </ul>
              <ul
                className="nice-tab-content"
              >
                <li
                  className="current"
                  key="child-0/.$0"
                >
                  <CharacterConfig
                    config={
                      Array [
                        Object {
                          "config": Array [
                            Object {
                              "path": "foo.value",
                              "type": "value",
                              "uuid": "mocked-uuid-1",
                              "value": "bar",
                            },
                          ],
                          "description": "foo",
                          "label": "a",
                          "type": "config",
                          "uuid": "mocked-uuid-9",
                        },
                      ]
                    }
                    key="0"
                  >
                    <FormGroup
                      key="0"
                      label="a"
                    >
                      <div
                        className="nice-form-group"
                      >
                        <label>
                          a
                        </label>
                        <MDReactComponent
                          text="foo"
                        >
                          <span
                            key="mdrct-html-0"
                          >
                            <p
                              key="mdrct-p-0"
                            >
                              foo
                            </p>
                          </span>
                        </MDReactComponent>
                        <CharacterConfig
                          config={
                            Array [
                              Object {
                                "path": "foo.value",
                                "type": "value",
                                "uuid": "mocked-uuid-1",
                                "value": "bar",
                              },
                            ]
                          }
                          type="config"
                          uuid="mocked-uuid-9"
                        >
                          <FormGroup
                            key="0"
                          >
                            <div
                              className="nice-form-group"
                            >
                              <label />
                              <CharacterEditorComponent
                                path="foo.value"
                                type="value"
                                uuid="mocked-uuid-1"
                                value="bar"
                              >
                                <ValuePropertySelect
                                  getCurrent={[Function]}
                                  onChange={[Function]}
                                  onSave={[Function]}
                                  onUpdate={[Function]}
                                  setState={[Function]}
                                  type="value"
                                  uuid="mocked-uuid-1"
                                  value="bar"
                                >
                                  <MDReactComponent
                                    text="bar"
                                  >
                                    <span
                                      key="mdrct-html-0"
                                    >
                                      <p
                                        key="mdrct-p-0"
                                      >
                                        bar
                                      </p>
                                    </span>
                                  </MDReactComponent>
                                </ValuePropertySelect>
                              </CharacterEditorComponent>
                            </div>
                          </FormGroup>
                        </CharacterConfig>
                      </div>
                    </FormGroup>
                  </CharacterConfig>
                </li>
              </ul>
            </div>
          </TabComponent>
        </ChoiceSelect>
      </CharacterEditorComponent>
    </div>
  </FormGroup>
</CharacterConfig>
`;

exports[`Component: CharacterConfig should render config 1`] = `
<CharacterConfig
  config={
    Array [
      Object {
        "config": Array [
          Object {
            "path": "foo.value",
            "type": "value",
            "uuid": "mocked-uuid-1",
            "value": "bar",
          },
        ],
        "type": "config",
        "uuid": "mocked-uuid-7",
      },
    ]
  }
>
  <FormGroup
    key="0"
  >
    <div
      className="nice-form-group"
    >
      <label />
      <CharacterConfig
        config={
          Array [
            Object {
              "path": "foo.value",
              "type": "value",
              "uuid": "mocked-uuid-1",
              "value": "bar",
            },
          ]
        }
        type="config"
        uuid="mocked-uuid-7"
      >
        <FormGroup
          key="0"
        >
          <div
            className="nice-form-group"
          >
            <label />
            <CharacterEditorComponent
              path="foo.value"
              type="value"
              uuid="mocked-uuid-1"
              value="bar"
            >
              <ValuePropertySelect
                getCurrent={[Function]}
                onChange={[Function]}
                onSave={[Function]}
                onUpdate={[Function]}
                setState={[Function]}
                type="value"
                uuid="mocked-uuid-1"
                value="bar"
              >
                <MDReactComponent
                  text="bar"
                >
                  <span
                    key="mdrct-html-0"
                  >
                    <p
                      key="mdrct-p-0"
                    >
                      bar
                    </p>
                  </span>
                </MDReactComponent>
              </ValuePropertySelect>
            </CharacterEditorComponent>
          </div>
        </FormGroup>
      </CharacterConfig>
    </div>
  </FormGroup>
</CharacterConfig>
`;

exports[`Component: CharacterConfig should render dict 1`] = `
<CharacterConfig
  config={
    Array [
      Object {
        "dict": Object {
          "bar": "blah",
          "description": "foo %(bar)s",
        },
        "path": "foo.dict",
        "type": "dict",
        "uuid": "mocked-uuid-2",
      },
    ]
  }
>
  <FormGroup
    key="0"
  >
    <div
      className="nice-form-group"
    >
      <label />
      <CharacterEditorComponent
        dict={
          Object {
            "bar": "blah",
            "description": "foo %(bar)s",
          }
        }
        path="foo.dict"
        type="dict"
        uuid="mocked-uuid-2"
      >
        <DictPropertySelect
          current={
            Object {
              "bar": "blah",
              "description": "foo %(bar)s",
            }
          }
          dict={
            Object {
              "bar": "blah",
              "description": "foo %(bar)s",
            }
          }
          getCurrent={[Function]}
          onChange={[Function]}
          onSave={[Function]}
          onUpdate={[Function]}
          setState={[Function]}
          type="dict"
          uuid="mocked-uuid-2"
        >
          <MDReactComponent
            text="foo blah"
          >
            <span
              key="mdrct-html-0"
            >
              <p
                key="mdrct-p-0"
              >
                foo blah
              </p>
            </span>
          </MDReactComponent>
        </DictPropertySelect>
      </CharacterEditorComponent>
    </div>
  </FormGroup>
</CharacterConfig>
`;

exports[`Component: CharacterConfig should render list 1`] = `
<CharacterConfig
  config={
    Array [
      Object {
        "add": 2,
        "given": Array [
          "wisdom",
        ],
        "list": Array [
          "statistics",
        ],
        "path": "foo.list",
        "replace": 1,
        "type": "list",
        "uuid": "mocked-uuid-4",
      },
    ]
  }
>
  <FormGroup
    key="0"
  >
    <div
      className="nice-form-group"
    >
      <label />
      <ListsToItemsCharacterEditorComponent
        add={2}
        given={
          Array [
            "wisdom",
          ]
        }
        list={
          Array [
            "statistics",
          ]
        }
        path="foo.list"
        replace={1}
        type="list"
        uuid="mocked-uuid-4"
      >
        <CharacterEditorComponent
          add={2}
          given={
            Array [
              "wisdom",
            ]
          }
          items={
            Array [
              Object {
                "code": "strength",
                "description": "Str",
                "label": "Strength",
              },
              Object {
                "code": "dexterity",
                "description": "Dex",
                "label": "Dexterity",
              },
              Object {
                "code": "constitution",
                "description": "Con",
                "label": "Constitution",
              },
              Object {
                "code": "intelligence",
                "description": "Int",
                "label": "Intelligence",
              },
              Object {
                "code": "wisdom",
                "description": "Wis",
                "label": "Wisdom",
              },
              Object {
                "code": "charisma",
                "description": "Char",
                "label": "Charisma",
              },
            ]
          }
          path="foo.list"
          replace={1}
          type="list"
          uuid="mocked-uuid-4"
        >
          <ListPropertySelect
            add={2}
            added={Array []}
            current={
              Array [
                "charisma",
                "wisdom",
              ]
            }
            filter={Object {}}
            getCurrent={[Function]}
            given={
              Array [
                "wisdom",
              ]
            }
            items={
              Array [
                Object {
                  "code": "strength",
                  "description": "Str",
                  "label": "Strength",
                },
                Object {
                  "code": "dexterity",
                  "description": "Dex",
                  "label": "Dexterity",
                },
                Object {
                  "code": "constitution",
                  "description": "Con",
                  "label": "Constitution",
                },
                Object {
                  "code": "intelligence",
                  "description": "Int",
                  "label": "Intelligence",
                },
                Object {
                  "code": "wisdom",
                  "description": "Wis",
                  "label": "Wisdom",
                },
                Object {
                  "code": "charisma",
                  "description": "Char",
                  "label": "Charisma",
                },
              ]
            }
            limit={0}
            multiple={false}
            onChange={[Function]}
            onSave={[Function]}
            onUpdate={[Function]}
            removed={Array []}
            replace={1}
            setState={[Function]}
            type="list"
            uuid="mocked-uuid-4"
          >
            <BaseTagContainer>
              <div
                className="base-tag-container nice-tags-container"
              >
                <SingleSelect
                  defaultValue={null}
                  emptyLabel="Add..."
                  isDisabled={[Function]}
                  items={
                    Array [
                      Object {
                        "code": "strength",
                        "description": "Str",
                        "label": "Strength",
                      },
                      Object {
                        "code": "dexterity",
                        "description": "Dex",
                        "label": "Dexterity",
                      },
                      Object {
                        "code": "constitution",
                        "description": "Con",
                        "label": "Constitution",
                      },
                      Object {
                        "code": "intelligence",
                        "description": "Int",
                        "label": "Intelligence",
                      },
                    ]
                  }
                  renderEmpty={null}
                  selected={null}
                  setState={[Function]}
                >
                  <OnClickOutside(BaseSelect)
                    eventTypes={
                      Array [
                        "mousedown",
                        "touchstart",
                      ]
                    }
                    excludeScrollbar={false}
                    label="Add..."
                    outsideClickIgnoreClass="ignore-react-onclickoutside"
                    preventDefault={false}
                    stopPropagation={false}
                  >
                    <BaseSelect
                      className={null}
                      closeOnClick={true}
                      description={null}
                      disableOnClickOutside={[Function]}
                      disabled={false}
                      enableOnClickOutside={[Function]}
                      eventTypes={
                        Array [
                          "mousedown",
                          "touchstart",
                        ]
                      }
                      heading={null}
                      label="Add..."
                      outsideClickIgnoreClass="ignore-react-onclickoutside"
                      preventDefault={false}
                      stopPropagation={false}
                    >
                      <div
                        className="nice-dropdown nice-form-control"
                      >
                        <SelectButton
                          disabled={false}
                          label="Add..."
                          onToggle={[Function]}
                        >
                          <button
                            className="nice-btn"
                            disabled={false}
                            onClick={[Function]}
                          >
                            Add...
                            <i
                              className="icon fa-angle-down"
                            />
                          </button>
                        </SelectButton>
                        <ul
                          className="dropdown-menu"
                          onClick={[Function]}
                        >
                          <SelectItem
                            disabled={false}
                            id="strength"
                            key="strength"
                            label="Strength"
                            onClick={[Function]}
                            selected={false}
                          >
                            <li
                              className={null}
                              data-value="strength"
                              onClick={[Function]}
                            >
                              <a>
                                Strength
                              </a>
                            </li>
                          </SelectItem>
                          <SelectItem
                            disabled={false}
                            id="dexterity"
                            key="dexterity"
                            label="Dexterity"
                            onClick={[Function]}
                            selected={false}
                          >
                            <li
                              className={null}
                              data-value="dexterity"
                              onClick={[Function]}
                            >
                              <a>
                                Dexterity
                              </a>
                            </li>
                          </SelectItem>
                          <SelectItem
                            disabled={false}
                            id="constitution"
                            key="constitution"
                            label="Constitution"
                            onClick={[Function]}
                            selected={false}
                          >
                            <li
                              className={null}
                              data-value="constitution"
                              onClick={[Function]}
                            >
                              <a>
                                Constitution
                              </a>
                            </li>
                          </SelectItem>
                          <SelectItem
                            disabled={false}
                            id="intelligence"
                            key="intelligence"
                            label="Intelligence"
                            onClick={[Function]}
                            selected={false}
                          >
                            <li
                              className={null}
                              data-value="intelligence"
                              onClick={[Function]}
                            >
                              <a>
                                Intelligence
                              </a>
                            </li>
                          </SelectItem>
                        </ul>
                      </div>
                    </BaseSelect>
                  </OnClickOutside(BaseSelect)>
                </SingleSelect>
                <Tag
                  badges={Array []}
                  className={null}
                  color="good"
                  description="Wis"
                  disabled={true}
                  id="wisdom"
                  key="tag-0"
                  label="Wisdom"
                  onChange={null}
                  onDelete={[Function]}
                >
                  <div
                    className="nice-tag good"
                  >
                    <TagLabel>
                      <span
                        className="nice-tag-label"
                      >
                        <ToolTip
                          content="Wis"
                        >
                          <div
                            className="tool-tip inline"
                          >
                            Wisdom
                            <MDReactComponent
                              className="tool-tip--content"
                              text="Wis"
                            >
                              <span
                                className="tool-tip--content"
                                key="mdrct-html-0"
                              >
                                <p
                                  key="mdrct-p-0"
                                >
                                  Wis
                                </p>
                              </span>
                            </MDReactComponent>
                          </div>
                        </ToolTip>
                      </span>
                    </TagLabel>
                  </div>
                </Tag>
                <Tag
                  badges={Array []}
                  className={null}
                  color="warning"
                  description="Char"
                  disabled={false}
                  id="charisma"
                  key="tag-1"
                  label="Charisma"
                  onChange={null}
                  onDelete={[Function]}
                >
                  <div
                    className="nice-tag warning"
                  >
                    <TagLabel>
                      <span
                        className="nice-tag-label"
                      >
                        <ToolTip
                          content="Char"
                        >
                          <div
                            className="tool-tip inline"
                          >
                            Charisma
                            <MDReactComponent
                              className="tool-tip--content"
                              text="Char"
                            >
                              <span
                                className="tool-tip--content"
                                key="mdrct-html-0"
                              >
                                <p
                                  key="mdrct-p-0"
                                >
                                  Char
                                </p>
                              </span>
                            </MDReactComponent>
                          </div>
                        </ToolTip>
                      </span>
                    </TagLabel>
                    <TagButton
                      icon="fa-trash-o"
                      label={null}
                      onClick={[Function]}
                    >
                      <button
                        className="nice-tag-btn"
                        onClick={[Function]}
                      >
                        <i
                          className="icon fa-trash-o"
                        />
                      </button>
                    </TagButton>
                  </div>
                </Tag>
              </div>
            </BaseTagContainer>
          </ListPropertySelect>
        </CharacterEditorComponent>
      </ListsToItemsCharacterEditorComponent>
    </div>
  </FormGroup>
</CharacterConfig>
`;

exports[`Component: CharacterConfig should render multichoice 1`] = `
<CharacterConfig
  config={
    Array [
      Object {
        "options": Array [
          Object {
            "description": "foo",
            "label": "a",
            "path": "foo.value",
            "type": "value",
            "uuid": "mocked-uuid-12",
            "value": "bar",
          },
          Object {
            "describe": "bar",
            "dict": Object {
              "bar": "blah",
              "description": "foo %(bar)s",
            },
            "label": "b",
            "path": "foo.dict",
            "type": "dict",
            "uuid": "mocked-uuid-13",
          },
        ],
        "type": "multichoice",
        "uuid": "mocked-uuid-11",
      },
    ]
  }
>
  <FormGroup
    key="0"
  >
    <div
      className="nice-form-group"
    >
      <label />
      <CharacterEditorComponent
        options={
          Array [
            Object {
              "description": "foo",
              "label": "a",
              "path": "foo.value",
              "type": "value",
              "uuid": "mocked-uuid-12",
              "value": "bar",
            },
            Object {
              "describe": "bar",
              "dict": Object {
                "bar": "blah",
                "description": "foo %(bar)s",
              },
              "label": "b",
              "path": "foo.dict",
              "type": "dict",
              "uuid": "mocked-uuid-13",
            },
          ]
        }
        type="multichoice"
        uuid="mocked-uuid-11"
      >
        <MultipleChoiceSelect
          add={0}
          added={Array []}
          character={
            Object {
              "foo": Object {
                "dict": Object {
                  "bar": "blah",
                  "description": "foo %(bar)s",
                },
                "list": Array [
                  "charisma",
                ],
                "select": "strength",
                "value": "bar",
              },
            }
          }
          description=""
          filtered={Array []}
          getCurrent={[Function]}
          limit={0}
          onChange={[Function]}
          onSave={[Function]}
          onUpdate={[Function]}
          options={
            Array [
              Object {
                "description": "foo",
                "label": "a",
                "path": "foo.value",
                "type": "value",
                "uuid": "mocked-uuid-12",
                "value": "bar",
              },
              Object {
                "describe": "bar",
                "dict": Object {
                  "bar": "blah",
                  "description": "foo %(bar)s",
                },
                "label": "b",
                "path": "foo.dict",
                "type": "dict",
                "uuid": "mocked-uuid-13",
              },
            ]
          }
          removed={Array []}
          replace={0}
          setState={[Function]}
          type="multichoice"
          uuid="mocked-uuid-11"
        >
          <div>
            <TagContainer
              className={null}
              disabled={false}
              items={
                Array [
                  Object {
                    "color": "warning",
                    "disabled": true,
                    "id": "mocked-uuid-12",
                    "label": "a",
                  },
                  Object {
                    "color": "warning",
                    "disabled": true,
                    "id": "mocked-uuid-13",
                    "label": "b",
                  },
                ]
              }
              multiple={false}
              onAdd={[Function]}
              onDelete={[Function]}
              setState={[Function]}
              showSelect={false}
              value={
                Array [
                  "mocked-uuid-12",
                  "mocked-uuid-13",
                ]
              }
            >
              <BaseTagContainer
                className={null}
              >
                <div
                  className="base-tag-container nice-tags-container"
                >
                  <TagSelect
                    current={
                      Array [
                        "mocked-uuid-12",
                        "mocked-uuid-13",
                      ]
                    }
                    items={
                      Array [
                        Object {
                          "color": "warning",
                          "disabled": true,
                          "id": "mocked-uuid-12",
                          "label": "a",
                        },
                        Object {
                          "color": "warning",
                          "disabled": true,
                          "id": "mocked-uuid-13",
                          "label": "b",
                        },
                      ]
                    }
                    multiple={false}
                    onSelect={[Function]}
                  />
                  <Tag
                    badges={Array []}
                    className={null}
                    color={null}
                    count={1}
                    description={null}
                    disabled={true}
                    key="mocked-uuid-12"
                    label="a"
                    onChange={null}
                    onDelete={[Function]}
                  >
                    <div
                      className="nice-tag muted"
                    >
                      <TagLabel>
                        <span
                          className="nice-tag-label"
                        >
                          <ToolTip
                            content={null}
                          >
                            a
                          </ToolTip>
                        </span>
                      </TagLabel>
                    </div>
                  </Tag>
                  <Tag
                    badges={Array []}
                    className={null}
                    color={null}
                    count={1}
                    description={null}
                    disabled={true}
                    key="mocked-uuid-13"
                    label="b"
                    onChange={null}
                    onDelete={[Function]}
                  >
                    <div
                      className="nice-tag muted"
                    >
                      <TagLabel>
                        <span
                          className="nice-tag-label"
                        >
                          <ToolTip
                            content={null}
                          >
                            b
                          </ToolTip>
                        </span>
                      </TagLabel>
                    </div>
                  </Tag>
                </div>
              </BaseTagContainer>
            </TagContainer>
            <CharacterConfig
              config={
                Array [
                  Object {
                    "description": "foo",
                    "label": "a",
                    "path": "foo.value",
                    "type": "value",
                    "uuid": "mocked-uuid-12",
                    "value": "bar",
                  },
                ]
              }
              key="0"
            >
              <FormGroup
                key="0"
                label="a"
              >
                <div
                  className="nice-form-group"
                >
                  <label>
                    a
                  </label>
                  <MDReactComponent
                    text="foo"
                  >
                    <span
                      key="mdrct-html-0"
                    >
                      <p
                        key="mdrct-p-0"
                      >
                        foo
                      </p>
                    </span>
                  </MDReactComponent>
                  <CharacterEditorComponent
                    path="foo.value"
                    type="value"
                    uuid="mocked-uuid-12"
                    value="bar"
                  >
                    <ValuePropertySelect
                      getCurrent={[Function]}
                      onChange={[Function]}
                      onSave={[Function]}
                      onUpdate={[Function]}
                      setState={[Function]}
                      type="value"
                      uuid="mocked-uuid-12"
                      value="bar"
                    >
                      <MDReactComponent
                        text="bar"
                      >
                        <span
                          key="mdrct-html-0"
                        >
                          <p
                            key="mdrct-p-0"
                          >
                            bar
                          </p>
                        </span>
                      </MDReactComponent>
                    </ValuePropertySelect>
                  </CharacterEditorComponent>
                </div>
              </FormGroup>
            </CharacterConfig>
            <CharacterConfig
              config={
                Array [
                  Object {
                    "describe": "bar",
                    "dict": Object {
                      "bar": "blah",
                      "description": "foo %(bar)s",
                    },
                    "label": "b",
                    "path": "foo.dict",
                    "type": "dict",
                    "uuid": "mocked-uuid-13",
                  },
                ]
              }
              key="1"
            >
              <FormGroup
                key="0"
                label="b"
              >
                <div
                  className="nice-form-group"
                >
                  <label>
                    b
                  </label>
                  <CharacterEditorComponent
                    describe="bar"
                    dict={
                      Object {
                        "bar": "blah",
                        "description": "foo %(bar)s",
                      }
                    }
                    path="foo.dict"
                    type="dict"
                    uuid="mocked-uuid-13"
                  >
                    <DictPropertySelect
                      current={
                        Object {
                          "bar": "blah",
                          "description": "foo %(bar)s",
                        }
                      }
                      describe="bar"
                      dict={
                        Object {
                          "bar": "blah",
                          "description": "foo %(bar)s",
                        }
                      }
                      getCurrent={[Function]}
                      onChange={[Function]}
                      onSave={[Function]}
                      onUpdate={[Function]}
                      setState={[Function]}
                      type="dict"
                      uuid="mocked-uuid-13"
                    >
                      <MDReactComponent
                        text="foo blah"
                      >
                        <span
                          key="mdrct-html-0"
                        >
                          <p
                            key="mdrct-p-0"
                          >
                            foo blah
                          </p>
                        </span>
                      </MDReactComponent>
                    </DictPropertySelect>
                  </CharacterEditorComponent>
                </div>
              </FormGroup>
            </CharacterConfig>
          </div>
        </MultipleChoiceSelect>
      </CharacterEditorComponent>
    </div>
  </FormGroup>
</CharacterConfig>
`;

exports[`Component: CharacterConfig should render select 1`] = `
<CharacterConfig
  config={
    Array [
      Object {
        "list": Array [
          "statistics",
        ],
        "path": "foo.select",
        "type": "select",
        "uuid": "mocked-uuid-2",
      },
    ]
  }
>
  <FormGroup
    key="0"
  >
    <div
      className="nice-form-group"
    >
      <label />
      <ListsToItemsCharacterEditorComponent
        list={
          Array [
            "statistics",
          ]
        }
        path="foo.select"
        type="select"
        uuid="mocked-uuid-2"
      >
        <CharacterEditorComponent
          items={
            Array [
              Object {
                "code": "strength",
                "description": "Str",
                "label": "Strength",
              },
              Object {
                "code": "dexterity",
                "description": "Dex",
                "label": "Dexterity",
              },
              Object {
                "code": "constitution",
                "description": "Con",
                "label": "Constitution",
              },
              Object {
                "code": "intelligence",
                "description": "Int",
                "label": "Intelligence",
              },
              Object {
                "code": "wisdom",
                "description": "Wis",
                "label": "Wisdom",
              },
              Object {
                "code": "charisma",
                "description": "Char",
                "label": "Charisma",
              },
            ]
          }
          path="foo.select"
          type="select"
          uuid="mocked-uuid-2"
        >
          <SelectPropertySelect
            current="strength"
            getCurrent={[Function]}
            items={
              Array [
                Object {
                  "code": "strength",
                  "description": "Str",
                  "label": "Strength",
                },
                Object {
                  "code": "dexterity",
                  "description": "Dex",
                  "label": "Dexterity",
                },
                Object {
                  "code": "constitution",
                  "description": "Con",
                  "label": "Constitution",
                },
                Object {
                  "code": "intelligence",
                  "description": "Int",
                  "label": "Intelligence",
                },
                Object {
                  "code": "wisdom",
                  "description": "Wis",
                  "label": "Wisdom",
                },
                Object {
                  "code": "charisma",
                  "description": "Char",
                  "label": "Charisma",
                },
              ]
            }
            onChange={[Function]}
            onSave={[Function]}
            onUpdate={[Function]}
            setState={[Function]}
            type="select"
            uuid="mocked-uuid-2"
          >
            <SingleSelect
              className="small"
              defaultValue={null}
              emptyLabel="Please select"
              isDisabled={[Function]}
              items={
                Array [
                  Object {
                    "code": "strength",
                    "description": "Str",
                    "label": "Strength",
                  },
                  Object {
                    "code": "dexterity",
                    "description": "Dex",
                    "label": "Dexterity",
                  },
                  Object {
                    "code": "constitution",
                    "description": "Con",
                    "label": "Constitution",
                  },
                  Object {
                    "code": "intelligence",
                    "description": "Int",
                    "label": "Intelligence",
                  },
                  Object {
                    "code": "wisdom",
                    "description": "Wis",
                    "label": "Wisdom",
                  },
                  Object {
                    "code": "charisma",
                    "description": "Char",
                    "label": "Charisma",
                  },
                ]
              }
              renderEmpty={null}
              selected="strength"
              setState={[Function]}
            >
              <OnClickOutside(BaseSelect)
                className="small"
                eventTypes={
                  Array [
                    "mousedown",
                    "touchstart",
                  ]
                }
                excludeScrollbar={false}
                label="Strength"
                outsideClickIgnoreClass="ignore-react-onclickoutside"
                preventDefault={false}
                stopPropagation={false}
              >
                <BaseSelect
                  className="small"
                  closeOnClick={true}
                  description={null}
                  disableOnClickOutside={[Function]}
                  disabled={false}
                  enableOnClickOutside={[Function]}
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  heading={null}
                  label="Strength"
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  stopPropagation={false}
                >
                  <div
                    className="nice-dropdown nice-form-control small"
                  >
                    <SelectButton
                      disabled={false}
                      label="Strength"
                      onToggle={[Function]}
                    >
                      <button
                        className="nice-btn"
                        disabled={false}
                        onClick={[Function]}
                      >
                        Strength
                        <i
                          className="icon fa-angle-down"
                        />
                      </button>
                    </SelectButton>
                    <ul
                      className="dropdown-menu"
                      onClick={[Function]}
                    >
                      <SelectItem
                        disabled={false}
                        id="strength"
                        key="strength"
                        label="Strength"
                        onClick={[Function]}
                        selected={true}
                      >
                        <li
                          className="info"
                          data-value="strength"
                          onClick={[Function]}
                        >
                          <a>
                            Strength
                          </a>
                        </li>
                      </SelectItem>
                      <SelectItem
                        disabled={false}
                        id="dexterity"
                        key="dexterity"
                        label="Dexterity"
                        onClick={[Function]}
                        selected={false}
                      >
                        <li
                          className={null}
                          data-value="dexterity"
                          onClick={[Function]}
                        >
                          <a>
                            Dexterity
                          </a>
                        </li>
                      </SelectItem>
                      <SelectItem
                        disabled={false}
                        id="constitution"
                        key="constitution"
                        label="Constitution"
                        onClick={[Function]}
                        selected={false}
                      >
                        <li
                          className={null}
                          data-value="constitution"
                          onClick={[Function]}
                        >
                          <a>
                            Constitution
                          </a>
                        </li>
                      </SelectItem>
                      <SelectItem
                        disabled={false}
                        id="intelligence"
                        key="intelligence"
                        label="Intelligence"
                        onClick={[Function]}
                        selected={false}
                      >
                        <li
                          className={null}
                          data-value="intelligence"
                          onClick={[Function]}
                        >
                          <a>
                            Intelligence
                          </a>
                        </li>
                      </SelectItem>
                      <SelectItem
                        disabled={false}
                        id="wisdom"
                        key="wisdom"
                        label="Wisdom"
                        onClick={[Function]}
                        selected={false}
                      >
                        <li
                          className={null}
                          data-value="wisdom"
                          onClick={[Function]}
                        >
                          <a>
                            Wisdom
                          </a>
                        </li>
                      </SelectItem>
                      <SelectItem
                        disabled={false}
                        id="charisma"
                        key="charisma"
                        label="Charisma"
                        onClick={[Function]}
                        selected={false}
                      >
                        <li
                          className={null}
                          data-value="charisma"
                          onClick={[Function]}
                        >
                          <a>
                            Charisma
                          </a>
                        </li>
                      </SelectItem>
                    </ul>
                  </div>
                </BaseSelect>
              </OnClickOutside(BaseSelect)>
            </SingleSelect>
          </SelectPropertySelect>
        </CharacterEditorComponent>
      </ListsToItemsCharacterEditorComponent>
    </div>
  </FormGroup>
</CharacterConfig>
`;

exports[`Component: CharacterConfig should render value 1`] = `
<CharacterConfig
  config={
    Array [
      Object {
        "path": "foo.value",
        "type": "value",
        "uuid": "mocked-uuid-1",
        "value": "bar",
      },
    ]
  }
>
  <FormGroup
    key="0"
  >
    <div
      className="nice-form-group"
    >
      <label />
      <CharacterEditorComponent
        path="foo.value"
        type="value"
        uuid="mocked-uuid-1"
        value="bar"
      >
        <ValuePropertySelect
          getCurrent={[Function]}
          onChange={[Function]}
          onSave={[Function]}
          onUpdate={[Function]}
          setState={[Function]}
          type="value"
          uuid="mocked-uuid-1"
          value="bar"
        >
          <MDReactComponent
            text="bar"
          >
            <span
              key="mdrct-html-0"
            >
              <p
                key="mdrct-p-0"
              >
                bar
              </p>
            </span>
          </MDReactComponent>
        </ValuePropertySelect>
      </CharacterEditorComponent>
    </div>
  </FormGroup>
</CharacterConfig>
`;

exports[`Component: CharacterConfig should render with array items 1`] = `
<CharacterConfig
  config={
    Array [
      Object {
        "add": 1,
        "given": Array [
          "bar",
        ],
        "items": Array [
          "foo",
          "bar",
        ],
        "path": "foo.items",
        "type": "list",
        "uuid": "mocked-uuid-5",
      },
    ]
  }
>
  <FormGroup
    key="0"
  >
    <div
      className="nice-form-group"
    >
      <label />
      <ListsToItemsCharacterEditorComponent
        add={1}
        given={
          Array [
            "bar",
          ]
        }
        items={
          Array [
            "foo",
            "bar",
          ]
        }
        path="foo.items"
        type="list"
        uuid="mocked-uuid-5"
      >
        <CharacterEditorComponent
          add={1}
          given={
            Array [
              "bar",
            ]
          }
          items={
            Array [
              Object {
                "code": "foo",
                "label": "foo",
              },
              Object {
                "code": "bar",
                "label": "bar",
              },
            ]
          }
          path="foo.items"
          type="list"
          uuid="mocked-uuid-5"
        >
          <ListPropertySelect
            add={1}
            added={Array []}
            current={
              Array [
                "bar",
              ]
            }
            filter={Object {}}
            getCurrent={[Function]}
            given={
              Array [
                "bar",
              ]
            }
            items={
              Array [
                Object {
                  "code": "foo",
                  "label": "foo",
                },
                Object {
                  "code": "bar",
                  "label": "bar",
                },
              ]
            }
            limit={0}
            multiple={false}
            onChange={[Function]}
            onSave={[Function]}
            onUpdate={[Function]}
            removed={Array []}
            replace={0}
            setState={[Function]}
            type="list"
            uuid="mocked-uuid-5"
          >
            <BaseTagContainer>
              <div
                className="base-tag-container nice-tags-container"
              >
                <SingleSelect
                  defaultValue={null}
                  emptyLabel="Add..."
                  isDisabled={[Function]}
                  items={
                    Array [
                      Object {
                        "code": "foo",
                        "label": "foo",
                      },
                    ]
                  }
                  renderEmpty={null}
                  selected={null}
                  setState={[Function]}
                >
                  <OnClickOutside(BaseSelect)
                    eventTypes={
                      Array [
                        "mousedown",
                        "touchstart",
                      ]
                    }
                    excludeScrollbar={false}
                    label="Add..."
                    outsideClickIgnoreClass="ignore-react-onclickoutside"
                    preventDefault={false}
                    stopPropagation={false}
                  >
                    <BaseSelect
                      className={null}
                      closeOnClick={true}
                      description={null}
                      disableOnClickOutside={[Function]}
                      disabled={false}
                      enableOnClickOutside={[Function]}
                      eventTypes={
                        Array [
                          "mousedown",
                          "touchstart",
                        ]
                      }
                      heading={null}
                      label="Add..."
                      outsideClickIgnoreClass="ignore-react-onclickoutside"
                      preventDefault={false}
                      stopPropagation={false}
                    >
                      <div
                        className="nice-dropdown nice-form-control"
                      >
                        <SelectButton
                          disabled={false}
                          label="Add..."
                          onToggle={[Function]}
                        >
                          <button
                            className="nice-btn"
                            disabled={false}
                            onClick={[Function]}
                          >
                            Add...
                            <i
                              className="icon fa-angle-down"
                            />
                          </button>
                        </SelectButton>
                        <ul
                          className="dropdown-menu"
                          onClick={[Function]}
                        >
                          <SelectItem
                            disabled={false}
                            id="foo"
                            key="foo"
                            label="foo"
                            onClick={[Function]}
                            selected={false}
                          >
                            <li
                              className={null}
                              data-value="foo"
                              onClick={[Function]}
                            >
                              <a>
                                foo
                              </a>
                            </li>
                          </SelectItem>
                        </ul>
                      </div>
                    </BaseSelect>
                  </OnClickOutside(BaseSelect)>
                </SingleSelect>
                <Tag
                  badges={Array []}
                  className={null}
                  color="good"
                  description={null}
                  disabled={true}
                  id="bar"
                  key="tag-0"
                  label="bar"
                  onChange={null}
                  onDelete={[Function]}
                >
                  <div
                    className="nice-tag good"
                  >
                    <TagLabel>
                      <span
                        className="nice-tag-label"
                      >
                        <ToolTip
                          content={null}
                        >
                          bar
                        </ToolTip>
                      </span>
                    </TagLabel>
                  </div>
                </Tag>
              </div>
            </BaseTagContainer>
          </ListPropertySelect>
        </CharacterEditorComponent>
      </ListsToItemsCharacterEditorComponent>
    </div>
  </FormGroup>
</CharacterConfig>
`;

exports[`Component: CharacterConfig should render with object items 1`] = `
<CharacterConfig
  config={
    Array [
      Object {
        "add": 1,
        "given": Array [
          "bar",
        ],
        "items": Array [
          Object {
            "code": "strength",
            "description": "Str",
            "label": "Strength",
          },
          Object {
            "code": "dexterity",
            "description": "Dex",
            "label": "Dexterity",
          },
          Object {
            "code": "constitution",
            "description": "Con",
            "label": "Constitution",
          },
          Object {
            "code": "intelligence",
            "description": "Int",
            "label": "Intelligence",
          },
          Object {
            "code": "wisdom",
            "description": "Wis",
            "label": "Wisdom",
          },
          Object {
            "code": "charisma",
            "description": "Char",
            "label": "Charisma",
          },
        ],
        "path": "foo.items",
        "type": "list",
        "uuid": "mocked-uuid-6",
      },
    ]
  }
>
  <FormGroup
    key="0"
  >
    <div
      className="nice-form-group"
    >
      <label />
      <ListsToItemsCharacterEditorComponent
        add={1}
        given={
          Array [
            "bar",
          ]
        }
        items={
          Array [
            Object {
              "code": "strength",
              "description": "Str",
              "label": "Strength",
            },
            Object {
              "code": "dexterity",
              "description": "Dex",
              "label": "Dexterity",
            },
            Object {
              "code": "constitution",
              "description": "Con",
              "label": "Constitution",
            },
            Object {
              "code": "intelligence",
              "description": "Int",
              "label": "Intelligence",
            },
            Object {
              "code": "wisdom",
              "description": "Wis",
              "label": "Wisdom",
            },
            Object {
              "code": "charisma",
              "description": "Char",
              "label": "Charisma",
            },
          ]
        }
        path="foo.items"
        type="list"
        uuid="mocked-uuid-6"
      >
        <CharacterEditorComponent
          add={1}
          given={
            Array [
              "bar",
            ]
          }
          items={
            Array [
              Object {
                "code": "strength",
                "description": "Str",
                "label": "Strength",
              },
              Object {
                "code": "dexterity",
                "description": "Dex",
                "label": "Dexterity",
              },
              Object {
                "code": "constitution",
                "description": "Con",
                "label": "Constitution",
              },
              Object {
                "code": "intelligence",
                "description": "Int",
                "label": "Intelligence",
              },
              Object {
                "code": "wisdom",
                "description": "Wis",
                "label": "Wisdom",
              },
              Object {
                "code": "charisma",
                "description": "Char",
                "label": "Charisma",
              },
            ]
          }
          path="foo.items"
          type="list"
          uuid="mocked-uuid-6"
        >
          <ListPropertySelect
            add={1}
            added={Array []}
            current={
              Array [
                "bar",
              ]
            }
            filter={Object {}}
            getCurrent={[Function]}
            given={
              Array [
                "bar",
              ]
            }
            items={
              Array [
                Object {
                  "code": "strength",
                  "description": "Str",
                  "label": "Strength",
                },
                Object {
                  "code": "dexterity",
                  "description": "Dex",
                  "label": "Dexterity",
                },
                Object {
                  "code": "constitution",
                  "description": "Con",
                  "label": "Constitution",
                },
                Object {
                  "code": "intelligence",
                  "description": "Int",
                  "label": "Intelligence",
                },
                Object {
                  "code": "wisdom",
                  "description": "Wis",
                  "label": "Wisdom",
                },
                Object {
                  "code": "charisma",
                  "description": "Char",
                  "label": "Charisma",
                },
              ]
            }
            limit={0}
            multiple={false}
            onChange={[Function]}
            onSave={[Function]}
            onUpdate={[Function]}
            removed={Array []}
            replace={0}
            setState={[Function]}
            type="list"
            uuid="mocked-uuid-6"
          >
            <BaseTagContainer>
              <div
                className="base-tag-container nice-tags-container"
              >
                <SingleSelect
                  defaultValue={null}
                  emptyLabel="Add..."
                  isDisabled={[Function]}
                  items={
                    Array [
                      Object {
                        "code": "strength",
                        "description": "Str",
                        "label": "Strength",
                      },
                      Object {
                        "code": "dexterity",
                        "description": "Dex",
                        "label": "Dexterity",
                      },
                      Object {
                        "code": "constitution",
                        "description": "Con",
                        "label": "Constitution",
                      },
                      Object {
                        "code": "intelligence",
                        "description": "Int",
                        "label": "Intelligence",
                      },
                      Object {
                        "code": "wisdom",
                        "description": "Wis",
                        "label": "Wisdom",
                      },
                      Object {
                        "code": "charisma",
                        "description": "Char",
                        "label": "Charisma",
                      },
                    ]
                  }
                  renderEmpty={null}
                  selected={null}
                  setState={[Function]}
                >
                  <OnClickOutside(BaseSelect)
                    eventTypes={
                      Array [
                        "mousedown",
                        "touchstart",
                      ]
                    }
                    excludeScrollbar={false}
                    label="Add..."
                    outsideClickIgnoreClass="ignore-react-onclickoutside"
                    preventDefault={false}
                    stopPropagation={false}
                  >
                    <BaseSelect
                      className={null}
                      closeOnClick={true}
                      description={null}
                      disableOnClickOutside={[Function]}
                      disabled={false}
                      enableOnClickOutside={[Function]}
                      eventTypes={
                        Array [
                          "mousedown",
                          "touchstart",
                        ]
                      }
                      heading={null}
                      label="Add..."
                      outsideClickIgnoreClass="ignore-react-onclickoutside"
                      preventDefault={false}
                      stopPropagation={false}
                    >
                      <div
                        className="nice-dropdown nice-form-control"
                      >
                        <SelectButton
                          disabled={false}
                          label="Add..."
                          onToggle={[Function]}
                        >
                          <button
                            className="nice-btn"
                            disabled={false}
                            onClick={[Function]}
                          >
                            Add...
                            <i
                              className="icon fa-angle-down"
                            />
                          </button>
                        </SelectButton>
                        <ul
                          className="dropdown-menu"
                          onClick={[Function]}
                        >
                          <SelectItem
                            disabled={false}
                            id="strength"
                            key="strength"
                            label="Strength"
                            onClick={[Function]}
                            selected={false}
                          >
                            <li
                              className={null}
                              data-value="strength"
                              onClick={[Function]}
                            >
                              <a>
                                Strength
                              </a>
                            </li>
                          </SelectItem>
                          <SelectItem
                            disabled={false}
                            id="dexterity"
                            key="dexterity"
                            label="Dexterity"
                            onClick={[Function]}
                            selected={false}
                          >
                            <li
                              className={null}
                              data-value="dexterity"
                              onClick={[Function]}
                            >
                              <a>
                                Dexterity
                              </a>
                            </li>
                          </SelectItem>
                          <SelectItem
                            disabled={false}
                            id="constitution"
                            key="constitution"
                            label="Constitution"
                            onClick={[Function]}
                            selected={false}
                          >
                            <li
                              className={null}
                              data-value="constitution"
                              onClick={[Function]}
                            >
                              <a>
                                Constitution
                              </a>
                            </li>
                          </SelectItem>
                          <SelectItem
                            disabled={false}
                            id="intelligence"
                            key="intelligence"
                            label="Intelligence"
                            onClick={[Function]}
                            selected={false}
                          >
                            <li
                              className={null}
                              data-value="intelligence"
                              onClick={[Function]}
                            >
                              <a>
                                Intelligence
                              </a>
                            </li>
                          </SelectItem>
                          <SelectItem
                            disabled={false}
                            id="wisdom"
                            key="wisdom"
                            label="Wisdom"
                            onClick={[Function]}
                            selected={false}
                          >
                            <li
                              className={null}
                              data-value="wisdom"
                              onClick={[Function]}
                            >
                              <a>
                                Wisdom
                              </a>
                            </li>
                          </SelectItem>
                          <SelectItem
                            disabled={false}
                            id="charisma"
                            key="charisma"
                            label="Charisma"
                            onClick={[Function]}
                            selected={false}
                          >
                            <li
                              className={null}
                              data-value="charisma"
                              onClick={[Function]}
                            >
                              <a>
                                Charisma
                              </a>
                            </li>
                          </SelectItem>
                        </ul>
                      </div>
                    </BaseSelect>
                  </OnClickOutside(BaseSelect)>
                </SingleSelect>
                <Tag
                  badges={Array []}
                  className={null}
                  color="good"
                  description={null}
                  disabled={true}
                  key="tag-0"
                  label="bar"
                  onChange={null}
                  onDelete={[Function]}
                >
                  <div
                    className="nice-tag good"
                  >
                    <TagLabel>
                      <span
                        className="nice-tag-label"
                      >
                        <ToolTip
                          content={null}
                        >
                          bar
                        </ToolTip>
                      </span>
                    </TagLabel>
                  </div>
                </Tag>
              </div>
            </BaseTagContainer>
          </ListPropertySelect>
        </CharacterEditorComponent>
      </ListsToItemsCharacterEditorComponent>
    </div>
  </FormGroup>
</CharacterConfig>
`;
