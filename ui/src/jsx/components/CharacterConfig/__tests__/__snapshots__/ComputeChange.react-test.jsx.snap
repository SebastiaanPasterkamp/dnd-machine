// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Function: ComputeChange mutations to bare stats with statistics should apply configured, but keep others unchanged 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "statistics": Object {
    "bare": Object {
      "bar": 14,
      "foo": 8,
      "ruh": 10,
    },
    "base": Object {
      "bar": 14,
      "ruh": 10,
    },
    "bonus": Object {
      "bar": Array [],
      "ruh": Array [],
    },
    "modifiers": Object {
      "bar": 2,
      "ruh": 0,
    },
  },
}
`;

exports[`Function: ComputeChange mutations to bare stats with statistics should not affect original 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "statistics": Object {
    "bare": Object {
      "bar": 10,
      "foo": 8,
    },
    "base": Object {},
    "bonus": Object {},
    "modifiers": Object {},
  },
}
`;

exports[`Function: ComputeChange mutations to bonuses with ability_score should increase selected, but keep others unchanged 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "statistics": Object {
    "bare": Object {
      "bar": 8,
      "ruh": 8,
    },
    "base": Object {
      "bar": 12,
      "ruh": 9,
    },
    "bonus": Object {
      "bar": Array [
        2,
        1,
        1,
      ],
      "foo": Array [
        1,
      ],
      "ruh": Array [
        1,
      ],
    },
    "modifiers": Object {
      "bar": 1,
      "ruh": -1,
    },
  },
}
`;

exports[`Function: ComputeChange mutations to bonuses with ability_score should not affect original 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "statistics": Object {
    "bare": Object {},
    "base": Object {},
    "bonus": Object {
      "bar": Array [
        2,
        1,
      ],
      "foo": Array [
        1,
      ],
      "ruh": Array [],
    },
    "modifiers": Object {},
  },
}
`;

exports[`Function: ComputeChange mutations to lists should apply 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "some": Object {
    "path": Array [
      "one",
      "foo",
      "ruh",
    ],
  },
}
`;

exports[`Function: ComputeChange mutations to lists should not affect original 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "some": Object {
    "path": Array [
      "one",
      "bar",
      "one",
      "foo",
    ],
  },
}
`;

exports[`Function: ComputeChange mutations to lists with duplicates should apply and keep duplicates 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "some": Object {
    "path": Array [
      "bar",
      "two",
      "foo",
      "foo",
    ],
  },
}
`;

exports[`Function: ComputeChange mutations to lists with duplicates should not affect original 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "some": Object {
    "path": Array [
      "one",
      "bar",
      "two",
      "foo",
    ],
  },
}
`;

exports[`Function: ComputeChange received dicts should be merged 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "some": Object {
    "path": Object {
      "description": "foo",
      "value": "rab",
    },
  },
}
`;

exports[`Function: ComputeChange received dicts should not affect original 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "some": Object {
    "path": Object {
      "description": "foo",
      "value": "bar",
    },
  },
}
`;

exports[`Function: ComputeChange received null value should be set 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "some": Object {
    "path": null,
  },
}
`;

exports[`Function: ComputeChange received null value should not affect original 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
}
`;

exports[`Function: ComputeChange received value for select should be set 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "some": Object {
    "path": "bar",
  },
}
`;

exports[`Function: ComputeChange received value for select should not affect original 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
}
`;

exports[`Function: ComputeChange received value for value should be set 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "some": Object {
    "path": "foo",
  },
}
`;

exports[`Function: ComputeChange received value for value should not affect original 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
}
`;

exports[`Function: ComputeChange return original if nothing changed should not affect original 1`] = `
Object {
  "other": Object {
    "is": "immutable",
  },
  "some": Object {
    "path": "foo",
  },
}
`;
