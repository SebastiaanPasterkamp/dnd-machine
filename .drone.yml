---
kind: pipeline
type: docker
name: Test

platform:
    os: linux
    arch: arm

steps:
  - name: backend2
    image: python:2-alpine3.8
    volumes:
      - name: pip-cache
        path: /root/.cache/pip
      - name: apk-cache
        path: /etc/apk/cache
    commands:
      - apk add build-base openssl-dev libffi-dev linux-headers pdftk
      - pip install --upgrade pip --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org
      - pip install -r requirements.txt
      - python app/tests/run_tests.py

  - name: backend3
    image: python:3.6-alpine3.8
    volumes:
      - name: pip-cache
        path: /root/.cache/pip
      - name: apk-cache
        path: /etc/apk/cache
    commands:
      - apk add build-base openssl-dev libffi-dev linux-headers pdftk
      - pip install --upgrade pip --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org
      - pip install -r requirements.txt
      - python app/tests/run_tests.py

  - name: frontend
    image: node:8.16-alpine
    volumes:
      - name: npm-cache
        path: /drone/src/ui/node_modules
      - name: apk-cache
        path: /etc/apk/cache
    commands:
      - apk add build-base python
      - cd ui
      - npm install
      - npm run test

volumes:
  - name: npm-cache
    host:
      path: /var/cache/drone/npm
  - name: pip-cache
    host:
      path: /var/cache/drone/pip
  - name: apk-cache
    host:
      path: /var/cache/drone/apk

---
kind: pipeline
type: docker
name: Docker Staging

platform:
    os: linux
    arch: arm

trigger:
  event:
  - push
  status:
  - success

depends_on:
  - Test

steps:
  - name: backup
    image: appleboy/drone-ssh:linux-arm
    failure: ignore
    settings:
      host:
        from_secret: ssh_host
      username:
        from_secret: ssh_user
      key:
        from_secret: ssh_key
      script:
        - >
          docker cp \
            "dndmachine_staging:/data/machine.db" \
            "backups/machine.staging.db.latest"
        - >
          cp "backups/machine.staging.db.latest" \
             "backups/machine.staging.db.$(date '+%Y%m%d')"

  - name: build
    image: docker
    volumes:
      - name: npm-cache
        path: /drone/src/ui/node_modules
      - name: socket
        path: /var/run/docker.sock
    commands:
        - docker build -t dnd-machine:staging .

  - name: restart
    image: appleboy/drone-ssh:linux-arm
    settings:
      command_timeout: 5m
      host:
        from_secret: ssh_host
      username:
        from_secret: ssh_user
      key:
        from_secret: ssh_key
      script:
        - docker stop dndmachine_staging || true
        - docker rm dndmachine_staging || true
        - >
          docker cp \
            "backups/machine.production.db.latest" \
            "dndmachine_staging:/data/machine.db" || true
        - >
          docker run \
            --detach \
            --publish "5005:5000/tcp" \
            --volume "stagingdata:/data" \
            --volume "/etc/dnd-machine/staging.json:/dnd-machine/app/config.local.json:ro" \
            --restart on-failure:3 \
            --name dndmachine_staging \
            "dnd-machine:staging"
    depends_on:
      - build

volumes:
  - name: npm-cache
    host:
      path: /var/cache/drone/npm
  - name: socket
    host:
      path: /var/run/docker.sock

---
kind: pipeline
type: docker
name: Stage

platform:
    os: linux
    arch: arm

trigger:
  event:
  - push
  status:
  - success

depends_on:
  - Docker Staging

steps:
  - name: package
    image: node:8.16-alpine
    volumes:
      - name: npm-cache
        path: /drone/src/ui/node_modules
      - name: apk-cache
        path: /etc/apk/cache
    commands:
      - apk add build-base python
      - ( cd ui && npm install && npm run build:production )
      - |
        tar \
            --exclude app/Dockerfile \
            --exclude app/docker \
            --exclude app/tests \
            -zcvf \
                "dnd-machine.${DRONE_COMMIT_SHA:0:8}.tar.gz" \
                *.md \
                *.txt \
                run.py \
                app/

  - name: copy
    image: appleboy/drone-scp:linux-arm
    settings:
      host:
        from_secret: ssh_host
      username:
        from_secret: ssh_user
      key:
        from_secret: ssh_key
      target: ~/code/staging
      source: "dnd-machine.${DRONE_COMMIT_SHA:0:8}.tar.gz"

  - name: deploy
    image: appleboy/drone-ssh:linux-arm
    settings:
      host:
        from_secret: ssh_host
      username:
        from_secret: ssh_user
      key:
        from_secret: ssh_key
      script:
        - cd ~/code/staging
        - mkdir -p "${DRONE_COMMIT_SHA:0:8}"
        - |
          tar \
              --directory "${DRONE_COMMIT_SHA:0:8}" \
              -zxvf "dnd-machine.${DRONE_COMMIT_SHA:0:8}.tar.gz"
        - cp latest/app/config.local.json "${DRONE_COMMIT_SHA:0:8}/app/"
        - . ~/.python-env/dnd-machine-beta/bin/activate
        - pip install -r "${DRONE_COMMIT_SHA:0:8}/requirements.txt"
        - rm latest
        - ln -s "${DRONE_COMMIT_SHA:0:8}" latest
        - sudo systemctl restart dndmachine-beta

volumes:
  - name: npm-cache
    host:
      path: /var/cache/drone/npm
  - name: apk-cache
    host:
      path: /var/cache/drone/apk

---
kind: pipeline
type: docker
name: Deploy

platform:
    os: linux
    arch: arm

trigger:
  branch:
  - master
  event:
  - push
  status:
  - success

depends_on:
  - Stage

steps:
  - name: package
    image: node:8.16-alpine
    volumes:
      - name: npm-cache
        path: /drone/src/ui/node_modules
      - name: apk-cache
        path: /etc/apk/cache
    commands:
      - apk add build-base python
      - ( cd ui && npm install && npm run build:production )
      - |
        tar \
            --exclude app/Dockerfile \
            --exclude app/docker \
            --exclude app/tests \
            -zcvf \
                "dnd-machine.${DRONE_COMMIT_SHA:0:8}.tar.gz" \
                *.md \
                *.txt \
                run.py \
                app/

  - name: copy
    image: appleboy/drone-scp:linux-arm
    settings:
      host:
        from_secret: ssh_host
      username:
        from_secret: ssh_user
      key:
        from_secret: ssh_key
      target: ~/code/production
      source: "dnd-machine.${DRONE_COMMIT_SHA:0:8}.tar.gz"

  - name: deploy
    image: appleboy/drone-ssh:linux-arm
    settings:
      host:
        from_secret: ssh_host
      username:
        from_secret: ssh_user
      key:
        from_secret: ssh_key
      script:
        - cd ~/code/production
        - mkdir -p "${DRONE_COMMIT_SHA:0:8}"
        - |
          tar \
              --directory "${DRONE_COMMIT_SHA:0:8}" \
              -zxvf "dnd-machine.${DRONE_COMMIT_SHA:0:8}.tar.gz"
        - cp latest/app/config.local.json "${DRONE_COMMIT_SHA:0:8}/app/"
        - . ~/.python-env/dnd-machine/bin/activate
        - pip install -r "${DRONE_COMMIT_SHA:0:8}/requirements.txt"
        - rm latest
        - ln -s "${DRONE_COMMIT_SHA:0:8}" latest
        - sudo systemctl restart dndmachine

volumes:
  - name: npm-cache
    host:
      path: /var/cache/drone/npm
  - name: apk-cache
    host:
      path: /var/cache/drone/apk

---
kind: pipeline
type: docker
name: Docker Production

platform:
    os: linux
    arch: arm

trigger:
  branch:
  - master
  event:
  - push
  status:
  - success

depends_on:
  - Deploy

steps:
  - name: backup
    image: appleboy/drone-ssh:linux-arm
    failure: ignore
    settings:
      host:
        from_secret: ssh_host
      username:
        from_secret: ssh_user
      key:
        from_secret: ssh_key
      script:
        - >
          docker cp \
            "dndmachine_production:/data/machine.db" \
            "backups/machine.production.db.latest"
        - >
          cp "backups/machine.production.db.latest" \
             "backups/machine.production.db.$(date '+%Y%m%d')"

  - name: build
    image: docker
    volumes:
      - name: npm-cache
        path: /drone/src/ui/node_modules
      - name: socket
        path: /var/run/docker.sock
    commands:
        - docker build -t dnd-machine:latest .

  - name: restart
    image: appleboy/drone-ssh:linux-arm
    settings:
      command_timeout: 5m
      host:
        from_secret: ssh_host
      username:
        from_secret: ssh_user
      key:
        from_secret: ssh_key
      script:
        - docker stop dndmachine_production || true
        - docker rm dndmachine_production || true
        - >
          docker cp \
            "code/production/flaskr.db" \
            "dndmachine_production:/data/machine.db" || true
        - >
          docker run \
            --detach \
            --publish "5000:5000/tcp" \
            --volume "productiondata:/data" \
            --volume "/etc/dnd-machine/production.json:/dnd-machine/app/config.local.json:ro" \
            --restart on-failure:3 \
            --name dndmachine_production \
            "dnd-machine:latest"
    depends_on:
      - build

volumes:
  - name: npm-cache
    host:
      path: /var/cache/drone/npm
  - name: socket
    host:
      path: /var/run/docker.sock

---
kind: signature
hmac: 68cf8c78f96788617f01947a0221c7a2c69b8c9ba2e940c58136d7eac916cc2c

...
